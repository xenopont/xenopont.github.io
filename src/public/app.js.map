{
  "version": 3,
  "sources": ["../utils/log.ts", "../x-element/x-element.ts", "../app.ts"],
  "sourcesContent": ["export const log = (msg: string) => {\n  // biome-ignore lint/suspicious/noConsole: it is allowed here for logging\n  console.log(`${new Date().toISOString().substring(0, 19)} ${msg}`);\n};\n", "type StyleKey = keyof CSSStyleDeclaration;\ntype StyleValue = string | number;\ntype StyleObject = Partial<Record<StyleKey, StyleValue>>;\n\ntype Attributes = { [attributeName: string]: string | StyleObject };\n\ntype Element = HTMLElement | HTMLUnknownElement;\ntype ChildElement = Element | string;\n\nconst attachChildren = (element: Element, children: ChildElement[]): void => {\n  for (const child of children) {\n    if (typeof child === \"string\") {\n      element.appendChild(document.createTextNode(child));\n    } else {\n      element.appendChild(child);\n    }\n  }\n};\n\nconst applyStyle = (element: Element, style: StyleObject | string): void => {\n  if (typeof style === \"string\") {\n    element.style.cssText = style;\n\n    return;\n  }\n  for (const property in style) {\n    if (!Object.prototype.hasOwnProperty.call(style, property)) {\n      continue;\n    }\n    element.style.setProperty(property, style[property]?.toString() ?? null);\n  }\n};\n\nconst applyAttributes = (element: Element, attributes: Attributes): void => {\n  for (const key in attributes) {\n    if (!Object.prototype.hasOwnProperty.call(attributes, key)) {\n      continue;\n    }\n\n    if (key === \"style\" && attributes[key] !== undefined) {\n      applyStyle(element, attributes[key]);\n      continue;\n    }\n\n    if (attributes[key] === undefined || attributes[key] === null) {\n      element.removeAttribute(key);\n      continue;\n    }\n\n    element.setAttribute(key, String(attributes[key]));\n  }\n};\n\nexport const xElement = (\n  tagName: string,\n  attributes: Attributes = {},\n  children: ChildElement[] = [],\n): Element => {\n  const element = document.createElement(tagName);\n  applyAttributes(element, attributes);\n  attachChildren(element, children);\n\n  return element;\n};\n", "import { log } from \"./utils/log.js\";\nimport { xElement } from \"./x-element/x-element.js\";\n\nlog(\"APP STARTED\");\n\nconst buildMarkup = () => {\n  document.body.appendChild(\n    xElement(\"div\", { style: { border: \"1px solid #c00\" }, id: \"test\" }, [\n      xElement(\"h1\", {}, [\"Hello World!\"]),\n    ]),\n  );\n};\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  buildMarkup();\n});\n"],
  "mappings": "mBAAO,IAAMA,EAAOC,GAAgB,CAElC,QAAQ,IAAI,GAAG,IAAI,KAAK,EAAE,YAAY,EAAE,UAAU,EAAG,EAAE,CAAC,IAAIA,CAAG,EAAE,CACnE,ECMA,IAAMC,EAAiB,CAACC,EAAkBC,IAAmC,CAC3E,QAAWC,KAASD,EACd,OAAOC,GAAU,SACnBF,EAAQ,YAAY,SAAS,eAAeE,CAAK,CAAC,EAElDF,EAAQ,YAAYE,CAAK,CAG/B,EAEMC,EAAa,CAACH,EAAkBI,IAAsC,CAC1E,GAAI,OAAOA,GAAU,SAAU,CAC7BJ,EAAQ,MAAM,QAAUI,EAExB,MACF,CACA,QAAWC,KAAYD,EAChB,OAAO,UAAU,eAAe,KAAKA,EAAOC,CAAQ,GAGzDL,EAAQ,MAAM,YAAYK,EAAUD,EAAMC,CAAQ,GAAG,SAAS,GAAK,IAAI,CAE3E,EAEMC,EAAkB,CAACN,EAAkBO,IAAiC,CAC1E,QAAWC,KAAOD,EAChB,GAAK,OAAO,UAAU,eAAe,KAAKA,EAAYC,CAAG,EAIzD,IAAIA,IAAQ,SAAWD,EAAWC,CAAG,IAAM,OAAW,CACpDL,EAAWH,EAASO,EAAWC,CAAG,CAAC,EACnC,QACF,CAEA,GAAID,EAAWC,CAAG,IAAM,QAAaD,EAAWC,CAAG,IAAM,KAAM,CAC7DR,EAAQ,gBAAgBQ,CAAG,EAC3B,QACF,CAEAR,EAAQ,aAAaQ,EAAK,OAAOD,EAAWC,CAAG,CAAC,CAAC,EAErD,EAEaC,EAAW,CACtBC,EACAH,EAAyB,CAAC,EAC1BN,EAA2B,CAAC,IAChB,CACZ,IAAMD,EAAU,SAAS,cAAcU,CAAO,EAC9C,OAAAJ,EAAgBN,EAASO,CAAU,EACnCR,EAAeC,EAASC,CAAQ,EAEzBD,CACT,EC5DAW,EAAI,aAAa,EAEjB,IAAMC,EAAc,IAAM,CACxB,SAAS,KAAK,YACZC,EAAS,MAAO,CAAE,MAAO,CAAE,OAAQ,gBAAiB,EAAG,GAAI,MAAO,EAAG,CACnEA,EAAS,KAAM,CAAC,EAAG,CAAC,cAAc,CAAC,CACrC,CAAC,CACH,CACF,EAEA,SAAS,iBAAiB,mBAAoB,IAAM,CAClDD,EAAY,CACd,CAAC",
  "names": ["log", "msg", "attachChildren", "element", "children", "child", "applyStyle", "style", "property", "applyAttributes", "attributes", "key", "xElement", "tagName", "log", "buildMarkup", "xElement"]
}
